collision = [769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,
    769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,
    769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,
    769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,
    769,769,769,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,769,769,769,
    769,769,769,0,0,0,0,0,0,0,0,0,0,0,0,0,769,0,0,769,769,769,
    769,769,769,0,0,0,0,0,0,0,0,0,0,0,0,769,769,769,0,769,769,769,
    769,769,769,0,0,0,0,0,0,0,0,0,0,0,0,0,769,0,0,769,769,769,
    769,769,769,0,0,0,769,0,0,0,769,0,0,0,0,0,0,0,0,769,769,769,
    769,769,769,0,0,0,769,0,0,0,769,0,0,0,0,0,0,0,0,0,769,769,
    769,769,769,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,769,769,
    769,769,769,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,769,769,
    769,769,769,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,769,769,
    769,769,769,769,769,769,769,0,0,0,0,0,0,0,0,0,0,0,0,0,769,769,
    769,769,769,769,769,769,769,0,0,0,0,0,0,0,0,0,0,0,0,0,769,769,
    769,769,769,769,769,769,769,0,0,0,0,0,0,0,0,0,0,0,0,0,769,769,
    769,769,769,769,769,769,769,0,0,0,0,0,0,0,0,0,0,0,0,0,769,769,
    769,769,769,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,769,769,
    769,769,769,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,769,769,
    769,769,769,769,769,769,769,769,0,0,0,0,0,0,0,769,769,769,769,769,769,769,
    769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,
    769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769,769];

interact = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,771,0,0,0,0,0,0,0,0,770,0,770,0,770,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,770,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,770,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,770,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];

collisionMap = [];
interactMap = [];
//zoom = 500%
for (let x = 0; x < interact.length; x += 22) {
    interactMap.push(interact.slice(x, x+22));
} 
for (let i = 0; i < collision.length; i += 22) {
    collisionMap.push(collision.slice(i, i+22));
}
class Boundary {
    static width = 80;
    static height = 80;
    constructor({position}) {
        this.position = position;
        this.width = 80;
        this.height = 80;
    }
    draw() {
        ctx.fillStyle = "red";
        ctx.fillRect(this.position.x, this.position.y, this.width, this.height);
    }
}

class obj {
    static width = 80;
    static height = 80;
    constructor({position}) {
        this.position = position;
        this.width = 80;
        this.height = 80;
        this.show = false;
        this.code = Math.floor(Math.random() * 9)+1;
    }
    draw() {
        ctx.fillStyle = "red";
        ctx.fillRect(this.position.x, this.position.y, this.width, this.height);
    }
}

const boundaries = [];
const interaction = [];
const escapedoor = [];

function collided(playerx, playery, bound) {
    return (playerx + playerW + 30 >= bound.position.x && playerx + 15  <= bound.position.x + Boundary.width &&  playery + 30 <= bound.position.y + Boundary.height && playery + playerH + 50 >= bound.position.y);
}

// function checking() {
//     if (exit && epressed) {
//         pass = prompt("Enter the code: ");
//         if (pass == code) {
//             window.open("https://mishra-atharva.github.io/", "_self");
//         } else {
//             epressed = false;
//             exit = false;
//         }
//     } 
// }
// function object(playerx, playery, objects) {
//     return(playerx + playerW + 30 >= objects.position.x && playerx + 15  <= objects.position.x + obj.width &&  playery + 30 <= objects.position.y + obj.height && playery + playerH + 50 >= objects.position.y);
// }
